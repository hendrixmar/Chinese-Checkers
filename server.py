import socket, time, pickle, random, _thread
import os
import re

txt = "The rain in Spain"

"""
>>> import pickle
>>> l = [1,2,3,4]
>>> with open("test.txt", "wb") as fp:   #Pickling
...   pickle.dump(l, fp)
...
>>> with open("test.txt", "rb") as fp:   # Unpickling
...   b = pickle.load(fp)
...
>>> b
[1, 2, 3, 4]
"""
table = [
        ['_','_','_','_','_','_', '_','_','_','_','_','_',2,'_','_','_','_','_','_','_','_','_','_'  ,'_','_'],
        ['_','_','_','_','_','_', '_','_','_','_','_',2,'_',2,'_','_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_','_','_',  2,'_',2,'_',2,'_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_', '_', 2,'_',2,'_',2,'_',2,'_','_','_','_','_','_','_','_'  ,'_'],
        [4  ,'_',  4,'_',  4,'_',  4, '_',  0,'_',0,'_',0,'_',0,'_',0, '_',  5,'_',  5,'_',  5, '_',  5],
        ['_',  4,'_',  4,'_',  4,'_',   0,'_',  0,'_',0,'_',0,'_',0,'_', 0,'_',  5,'_',  5,'_',  5,'_'],
        ['_','_',  4,'_',  4,'_',  0, '_',  0,'_', 0,'_', 0,'_',0, '_',  0,'_', 0,'_', 5, '_',  5,'_','_'],
        ['_','_','_', 4, '_',  0,'_',   0,'_',  0,'_', 0,'_', 0,'_', 0,'_',  0,'_', 0,'_',  5,'_','_','_'],
        ['_','_','_','_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_','_','_','_'],
        ['_','_','_', 6, '_',  0,'_',   0,'_',  0,'_', 0,'_', 0,'_', 0,'_',  0,'_', 0,'_',  3,'_','_','_'],
        ['_','_',  6,'_',  6,'_',  0, '_',  0,'_', 0,'_', 0,'_',0, '_',  0,'_', 0,'_', 3, '_',  3,'_','_'],
        ['_',  6,'_',  4,'_',  6,'_',   0,'_',  0,'_',0,'_',0,'_',0,'_', 0,'_',  3,'_',  3,'_',  3,'_'],
        [6  ,'_',  6,'_',  6,'_',  6, '_',  0,'_',0,'_',0,'_',0,'_',0, '_',  3,'_',  3,'_',  3, '_',  3],
        ['_','_','_','_','_','_', '_','_', '_', 2,'_',1,'_',1,'_',2,'_','_','_','_','_','_','_','_'  ,'_'],
        ['_','_','_','_','_','_', '_','_','_','_',  2,'_',2,'_',2,'_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_','_','_','_',2,'_',2,'_','_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_','_','_','_','_',2,'_','_','_','_','_','_','_','_','_','_'  ,'_','_'],
        ]



table = [
        ['_','_','_','_','_','_', '_','_','_','_','_','_',1,'_','_','_','_','_','_','_','_','_','_'  ,'_','_'],
        ['_','_','_','_','_','_', '_','_','_','_','_',1,'_',1,'_','_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_','_','_',  1,'_',1,'_',1,'_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_', '_', 1,'_',1,'_',1,'_',1,'_','_','_','_','_','_','_','_'  ,'_'],
        [4  ,'_',  4,'_',  4,'_',  4, '_',  0,'_',0,'_',0,'_',0,'_',0, '_',  5,'_',  5,'_',  5, '_',  5],
        ['_',  4,'_',  4,'_',  4,'_',   0,'_',  0,'_',0,'_',0,'_',0,'_', 0,'_',  5,'_',  5,'_',  5,'_'],
        ['_','_',  4,'_',  4,'_',  0, '_',  0,'_', 0,'_', 0,'_',0, '_',  0,'_', 0,'_', 5, '_',  5,'_','_'],
        ['_','_','_', 4, '_',  0,'_',   0,'_',  0,'_', 0,'_', 0,'_', 0,'_',  0,'_', 0,'_',  5,'_','_','_'],
        ['_','_','_','_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_',0,'_','_','_','_'],
        ['_','_','_', 6, '_',  0,'_',   0,'_',  0,'_', 0,'_', 0,'_', 0,'_',  0,'_', 0,'_',  3,'_','_','_'],
        ['_','_',  6,'_',  6,'_',  0, '_',  0,'_', 0,'_', 0,'_',0, '_',  0,'_', 0,'_', 3, '_',  3,'_','_'],
        ['_',  6,'_',  6,'_',  6,'_',   0,'_',  0,'_',0,'_',0,'_',0,'_', 0,'_',  3,'_',  3,'_',  3,'_'],
        [6  ,'_',  6,'_',  6,'_',  6, '_',  0,'_',0,'_',0,'_',0,'_',0, '_',  3,'_',  3,'_',  3, '_',  3],
        ['_','_','_','_','_','_', '_','_', '_', 2,'_',2,'_',2,'_',2,'_','_','_','_','_','_','_','_'  ,'_'],
        ['_','_','_','_','_','_', '_','_','_','_',  2,'_',2,'_',2,'_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_','_','_','_',2,'_',2,'_','_','_','_','_','_','_','_','_','_','_'],
        ['_','_','_','_','_','_', '_','_','_','_','_','_',2,'_','_','_','_','_','_','_','_','_','_'  ,'_','_'],
        ]





lookup = [{}, {(13, 9): 0, (13, 11): 0, (13, 13): 0, (13, 15): 0, (14, 10): 0, (14, 12): 0, (14, 14): 0, (15, 11): 0, (15, 13): 0, (16, 12): 0}, {(0, 12): 0, (1, 11): 0, (1, 13): 0, (2, 10): 0, (2, 12): 0, (2, 14): 0, (3, 9): 0, (3, 11): 0, (3, 13): 0, (3, 15): 0}, {(4, 0): 0, (4, 2): 0, (4, 4): 0, (4, 6): 0, (5, 1): 0, (5, 3): 0, (5, 5): 0, (6, 2): 0, (6, 4): 0, (7, 3): 0}, {(9, 21): 0, (10, 20): 0, (10, 22): 0, (11, 19): 0, (11, 21): 0, (11, 23): 0, (12, 18): 0, (12, 20): 0, (12, 22): 0, (12, 24): 0}, {(9, 3): 0, (10, 2): 0, (10, 4): 0, (11, 1): 0, (11, 3): 0, (11, 5): 0, (12, 0): 0, (12, 2): 0, (12, 4): 0, (12, 6): 0}, {(4, 18): 0, (4, 20): 0, (4, 22): 0, (4, 24): 0, (5, 19): 0, (5, 21): 0, (5, 23): 0, (6, 20): 0, (6, 22): 0, (7, 21): 0}]


serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serversocket.bind(("127.0.0.1", 8080))

serversocket.listen(2)

connection = []
FLAG = True
player = 1
n = 0
user = 1
def game_state_online(n):

    global table, lookup, connection, user


    while True:

        temp = recieve_information(user-1)

        if temp == 'save':



            with open(f'{n}{user}_state_game.txt', "wb") as fp:   #Pickling
                pickle.dump(table, fp)
            continue

        else:
            table = temp

        for i in range(17):
            for j in range(25):
                num = table[i][j]
                if num in range(1,7) and (i,j) in lookup[num]:
                    lookup[num][(i,j)] = 1

        for i in range(1,7):
            if sum(list(lookup[i].values())) == 10:
                for j in range(n):
                    data_arr = pickle.dumps((i))
                    connection[j].send(data_arr)


        user = (user)%n  + 1
        data_arr = pickle.dumps((user,table))
        for i in range(n):
            connection[i].send(data_arr)






def waiting_for_connections(num_elem):

    global player, table, user

    if len(connection) < num_elem:
        conn, addr = serversocket.accept()
        print(addr)
        connection.append(conn)
        data_arr = pickle.dumps(player)
        connection[-1].send(data_arr)
        player += 1
        return False
    else:
        data_arr = pickle.dumps((False,table))
        for i in range(num_elem):
            connection[i].send(data_arr)


        return True


def recieve_information(n):
    return pickle.loads(connection[n].recv(1024))




a = input("Desea recuperar la ultima partida: ")

if a in ['y','yes', 'si']:

    for file in os.listdir("."):
        if re.search("[1-6][1-6]_state_game.txt", file):
            print (file)


            n = int(file[0])
            user = int(file[1])

else:
    user = 1
    n = int(input("Cuantos con cuantos jugadores desea jugar: "))


while True:
    flag = waiting_for_connections(n)

    if flag:
        break

    a = recieve_information(-1)

game_state_online(n)
